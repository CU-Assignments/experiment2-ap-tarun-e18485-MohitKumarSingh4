1.	Aim: Implement a FIFO queue using two stacks. The queue should support all the functions of a normal queue: push, peek, pop, and empty.

2.	Algorithm:
•	Use two stacks: stack1 for pushing elements, stack2 for popping elements.
•	For push(x), simply push x onto stack1.
•	For pop(), if stack2 is empty, transfer all elements from stack1 to stack2. Then, pop the top element from stack2.
•	For peek(), if stack2 is empty, transfer all elements from stack1 to stack2. Then, return the top element of stack2.
•	For empty(), check if both stack1 and stack2 are empty.

3.	Implementation/Code:
#include <iostream>
#include <stack>

using namespace std;

class MyQueue {
private:
    stack<int> inputStack, outputStack;

    void transfer() {
        while (!inputStack.empty()) {
            outputStack.push(inputStack.top());
            inputStack.pop();
        }
    }

public:
    void push(int x) {
        inputStack.push(x);
    }

    int pop() {
        if (outputStack.empty()) {
            transfer();
        }
        int top = outputStack.top();
        outputStack.pop();
        return top;
    }

    int peek() {
        if (outputStack.empty()) {
            transfer();
        }
        return outputStack.top();
    }

    bool empty() {
        return inputStack.empty() && outputStack.empty();
    }
};

int main() {
    MyQueue q;
    q.push(1);
    q.push(2);
    
    cout << "Peek: " << q.peek() << endl;  // Outputs 1
    cout << "Pop: " << q.pop() << endl;    // Outputs 1
    cout << "Empty: " << q.empty() << endl; // Outputs 0 (false)
    
    return 0;
}

4.	Output:
    Peek: 1
    Pop: 1
    Empty: 0
    
5.	Learning Outcome:

•	Learn the difference between a queue (FIFO) and a stack (LIFO).
•	Understand how to manipulate stack operations (push, pop, top, empty) to simulate queue behavior.
•	Develop the ability to break down a problem into logical steps, such as finding a complement and storing indices for reference.
•	Gain insight into how data structures like arrays and hash maps can work together to solve real-world problems effectively
6.	Time Complexity:
•	push(x): O (1)
•	pop (): O ( n ) in the worst case when elements are transferred from stack1 to stack2.
•	Peek (): O ( n ) in the worst case.
•	Empty (): O (1)
